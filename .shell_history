ls
find
create n
;
cd n
 /usr/local/bin/neo4j-shell -path yurl.db 
 START n=node(*) RETURN n;
cd 45
cd -a 45
set type category
set name root
ls
create n;
cd -a 46
set type category
set name technology
create n;
cd -a 47
set type category
set name business
exit
START target=node(*) MATCH target<-[r?:link]-source WHERE r is null RETURN target
;
exit
START target=node(*) MATCH target<-[r?:link]-source WHERE r is null AND target.type != 'property' RETURN target
;
START target=node(*) MATCH target<-[r?:link]-source WHERE r is null AND target.type <> 'property' RETURN target
;
START target=node(*) MATCH target<-[r?:link]-source WHERE r is null AND target.type? <> 'property' RETURN target;
START target=node(*) MATCH target<-[r?:link]-source WHERE r is null AND (target.type is null or target.typetypedafet.type <> 'property') RETURN target;
START target=node(*) MATCH target<-[r?:link]-source WHERE r is null AND (target.type is null or target.type <> 'property') RETURN target
;
START target=node(*) MATCH target<-[r?:link]-source WHERE r is null AND (target.type = null or target.type <> 'property') RETURN target
;
match n where n.name = NULL;
start n=node(*) match n where n.name = NULL;
start n=node(*) match n WHERE n.name = NULL;
start n=node(*) MATCH n WHERE n.name = NULL;
start n=node(*) WHERE n.name = NULL;
start n=node(*);
start n=node(*) return n;
start n=node(*) match n return n;
start n=node(*) where n.type = null return n;
start n=node(*) where n.type = NULL return n;
start n=node(*) where not(has(n.type))  return n;
start n=node(*) MATCH n<-[r?:link]-source where not(has(n.type)) and r is null return n;
start n=node(*) MATCH n<-[r?:link]-source where  r is null return n;
cd 0
 START n=node(*) MATCH (n)-[r] ->(c) RETURN distinct n,r,c;
exit
start n=node(*) MATCH n<-[r?:link]-source where  r is null return n;
start n=node(*) MATCH n<-[r?:CONTAINS]-source where  r is null return n;
start n=node(*) MATCH n<-[r?:CONTAINS]-source where not(has(n.type)) and r is null return n;
create n;
cd -a 48
pwd
ls
set type categoryNode
set key #
set name trash
cd -a 47
cd -a 46
cd -a 45
start n=node(*) MATCH n<-[r?:CONTAINS]-source where not(has(n.type)) and r is null return n;
 START n=node(*) MATCH (n)-[r:CONTAINS] ->(c) WHERE n.type RETURN distinct n.name?,r,c.name?;
 START n=node(*) MATCH (n)-[r:CONTAINS] ->(c) WHERE n.type = 'technology' RETURN distinct n.name?,r,c.name?;
 START n=node(*) MATCH (n)-[r:CONTAINS] ->(c) WHERE n.type? = 'technology' RETURN distinct n.name?,r,c.name?;
cd -45
cd -a 45
cd -a 48
pwd
 START n=node(*) MATCH (n)-[r] ->(c) RETURN distinct n,r,c;
 START n=node(*) MATCH (n)-[r] ->(c) RETURN distinct n.id,r,c;
 START n=node(*) MATCH (n)-[r] ->(c) RETURN distinct n.identifier,r,c;
 START n=node(*) MATCH (n)-[r] ->(c) WHERE has(n.name) RETURN distinct n,r,c;
 START n=node(*) MATCH (n)-[r] ->(c) WHERE has(n.name) and n.name = 'technology'RETURN distinct n,r,c;
 START n=node(*) MATCH (n)-[r] ->(c) WHERE has(n.name) and n.name = 'trash' RETURN distinct n,r,c;
